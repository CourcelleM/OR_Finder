.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::ORA 3"
.TH Bio::ORA 3 "2023-01-17" "perl v5.22.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::ORA \- Olfactory Receptor family Assigner (ORA) [bioperl module]
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Take a sequence object from, say, an inputstream, and find an Olfactory
Receptor gene. \s-1HMM\s0 profiles are used in order to identify location, frame
and orientation of such gene.
.PP
Creating the \s-1ORA\s0 object, eg:
.PP
.Vb 3
\&  my $inputstream = Bio::SeqIO\->new( \-file => \*(Aqseqfile\*(Aq, \-format => \*(Aqfasta\*(Aq );
\&  my $seqobj = $inputstream\->next_seq();
\&  my $ORA_obj = Bio::ORA\->new( $seqobj );
.Ve
.PP
Obtain an array holding the start point, the stop point, the \s-1DNA\s0 sequence
and amino-acid sequence, eg:
.PP
.Vb 1
\&  my $array_ref = $ORA_obj\->{\*(Aq_result\*(Aq} if ( $ORA_obj\->find() );
.Ve
.PP
Display result in genbank format, eg:
.PP
.Vb 1
\&  $ORA_obj\->show( \*(Aqgenbank\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::ORA is a featherweight object for identifying mammalian
olfactory receptor genes. The sequences should not be longer than 40kb. The
returned array include location, sequence and statistic for the putative
olfactory receptor gene. Fully functional with \s-1DNA\s0 and \s-1EST\s0
sequence, no intron supported.
.PP
See Synopsis above for the object creation code.
.SH "DRIVER SCRIPT"
.IX Header "DRIVER SCRIPT"
.Vb 5
\&  #!/usr/bin/perl
\&  use strict;
\&  use warnings;
\&  use Bio::Seq;
\&  use Bio::ORA;
\&
\&  my $inseq = Bio::SeqIO\->new( \*(Aq\-file\*(Aq => q{<} . $ARGV[0], \-format => \*(Aqfasta\*(Aq );
\&  while (my $seq = $inseq\->next_seq) {
\&    my $ORA_obj = Bio::ORA\->new( $seq );
\&    if ( $ORA_obj\->find() ) {
\&      $ORA_obj\->show( \*(Aqgenbank\*(Aq );
\&    } else {
\&      print {*STDOUT} "  no hit!\en";
\&    }
\&  }
.Ve
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
To use this module you may need:
 * Bioperl (<http://bioperl.org/>) modules,
 * \s-1HMMER\s0 v3+ distribution (<http://hmmer.org/>) and
 * \s-1FASTA 36+\s0 distribution (<https://github.com/wrpearson/fasta36/>).
.SH "LOCAL ADAPTATION"
.IX Header "LOCAL ADAPTATION"
This module uses three softwares. If \s-1HMMER\s0 or \s-1FASTA\s0 are updated make sure that
\&\s-1HMMER\s0's hmmscan and \s-1FASTA\s0's tfastx36 and fastx36 still exists under these names.
You change the call my editing the \*(L"Default softwares\*(R" section.
.PP
.Vb 4
\&  # Default softwares
\&  my $hmmscan = \*(Aqhmmscan\*(Aq;
\&  my $tfastx = \*(Aqtfastx36\*(Aq;
\&  my $fastx = \*(Aqfastx36\*(Aq;
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
If you have any problems with or questions about the scripts, please contact us
through a GitHub issue (<https://github.com/pseudogene/ora/issues>). You are
invited to contribute new features, fixes, or updates, large or small; we are
always thrilled to receive pull requests, and do our best to process them as
fast as we can.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\fBMichael Bekaert\fR (michael.bekaert@stir.ac.uk)
.PP
Address:
     Institute of Aquaculture
     University of Stirling
     Stirling
     Scotland, \s-1FK9 4LA
     UK\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), bioperl web site
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2007\-2016 \- Michael Bekaert
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal
methods are usually preceded with a _
.SS "_findexec"
.IX Subsection "_findexec"
.Vb 5
\& Title   : _findexec
\& Usage   : my $path = $self\->_findexec( $exec );
\& Function: Find an executable file in the $PATH.
\& Returns : The full path to the executable.
\& Args    : $exec (mandatory) executable to be find.
.Ve
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $nb = Bio::ORA\->new( $seqobj, $table, $aug, $hmm );
\& Function: Initialize ORA object.
\& Returns : An ORA object.
\& Args    : $seqobj (mandatory) PrimarySeqI object (dna or rna),
\&           $table (optional) translation table/genetic code number,
\&              the default value is 1,
\&           $aug (optional) use other start codon than AUG (default 0),
\&           $hmm (optional) path to hmm profiles by default ORA looks at
\&             ./or.hmm.
.Ve
.SS "find"
.IX Subsection "find"
.Vb 12
\& Title   : find
\& Usage   : my $bool = $ORI_obj\->find( $evalue, $strand, $start, $end );
\& Function: Identify an olfactory receptor protein.
\& Returns : boolean.
\& Args    : $evalue (optional) set the E\-value (expected) threshold.
\&             Default is 1e\-30,
\&           $strand(optional) strand where search should be done (1 direct,
\&             \-1 reverse or 0 both). Default is 0,
\&           $start (optional) coordinate of the first nucleotide. Useful
\&             for coordinate calculation when first is not 1. Default is 1,
\&           $end (optional) coordinate of the last nucleotide. Default is
\&             the sequence length.
.Ve
.SS "_what_or"
.IX Subsection "_what_or"
.Vb 6
\& Title   : _what_or
\& Usage   : my $bool = $self\->_what_or( $strand );
\& Function: Use HMM profiles to identify an olfactory receptor gene.
\& Returns : boolean.
\& Args    : $strand (optional) strand where search should be done
\&           (1 direct, \-1 reverse or 0 both). Default is 0.
.Ve
.SS "_find_orf"
.IX Subsection "_find_orf"
.Vb 8
\& Title   : _find_orf
\& Usage   : my $bool = $self\->_find_or( $strand, $start, $end );
\& Function: Retrieve the olfactory receptor ORF.
\& Returns : boolean.
\& Args    : $strand (mandatory) strand where ORA have been found
\&           (1 direct or \-1 reverse),
\&           $start (mandatory) coordinate of the first nucleotide,
\&           $end (mandatory) coordinate of the last nucleotide.
.Ve
.SS "getHits"
.IX Subsection "getHits"
.Vb 8
\& Title   : getHits
\& Usage   : my @hits = Bio::ORA\->getHits( $seq, $evalue, $ref );
\& Function: Quick localization of ORs (use FASTA).
\& Returns : Array of hits start/stop positions.
\& Args    : $seq (mandatory) primarySeqI object (dna or rna),
\&           $evalue (mandatory) det the E\-value threshold,
\&           $ref (optional) path to fasta reference file, by default ORA
\&             look at ./or.fasta.
.Ve
.SS "fastScan"
.IX Subsection "fastScan"
.Vb 7
\& Title   : fastScan
\& Usage   : my @hits = Bio::ORA\->fastScan( $seq, $ref );
\& Function: Quick localization of ORs (use FASTA).
\& Returns : Array of hits start/stop positions.
\& Args    : $seq (mandatory) primarySeqI object (dna or rna),
\&           $ref (optional) path to fasta reference file, by default ORA
\&             look at ./or.fasta.
.Ve
.SS "show"
.IX Subsection "show"
.Vb 5
\& Title   : show
\& Usage   : $ORA_obj\->show( $outstyle );
\& Function: Print result in various style.
\& Returns : none.
\& Args    : $outstyle (mandatory) \*(Aqfasta\*(Aq, \*(Aqgenbank\*(Aq, \*(Aqcvs\*(Aq, \*(Aqxml\*(Aq or \*(Aqtsv\*(Aq style.
.Ve
.SS "_translation"
.IX Subsection "_translation"
.Vb 5
\& Title   : _translation
\& Usage   : my ( $start, $end ) = $self\->_translation();
\& Function: format initiation and stop codons for regex.
\& Returns : array with initiation and stop codons.
\& Args    : none.
.Ve
